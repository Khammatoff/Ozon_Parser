import pika
import os
import time
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)


def setup_queue():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    rabbitmq_host = os.getenv('RABBITMQ_HOST', 'rabbitmq')  # –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ docker-compose
    rabbitmq_user = os.getenv('RABBITMQ_USER', 'admin')
    rabbitmq_pass = os.getenv('RABBITMQ_PASS', 'guest')
    total_sellers = int(os.environ['TOTAL_SELLERS'])

    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏")
    logging.info(f"üéØ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ: {rabbitmq_host}")
    logging.info(f"üìä –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_sellers} ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")

    # –¶–∏–∫–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    while True:
        try:
            credentials = pika.PlainCredentials(rabbitmq_user, rabbitmq_pass)
            connection = pika.BlockingConnection(
                pika.ConnectionParameters(
                    host=rabbitmq_host,
                    credentials=credentials,
                    heartbeat=600,
                    connection_attempts=10,
                    retry_delay=5
                )
            )
            logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            break  # –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
            logging.info("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

    try:
        channel = connection.channel()

        # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å (durable=True ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
        channel.queue_declare(queue='seller_ids', durable=True)
        logging.info("‚úÖ –û—á–µ—Ä–µ–¥—å 'seller_ids' –æ–±—ä—è–≤–ª–µ–Ω–∞")

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        added_count = 0
        for seller_id in range(1, total_sellers + 1):
            channel.basic_publish(
                exchange='',
                routing_key='seller_ids',
                body=str(seller_id),
                properties=pika.BasicProperties(
                    delivery_mode=2  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫
                )
            )
            added_count += 1

            if added_count % 1000 == 0:
                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} ID –≤ –æ—á–µ—Ä–µ–¥—å")

        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å 'seller_ids'")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ—á–µ—Ä–µ–¥—å—é: {e}")
        raise
    finally:
        try:
            connection.close()
            logging.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ")
        except:
            pass


def check_queue_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        load_dotenv()
        credentials = pika.PlainCredentials(
            os.getenv('RABBITMQ_USER', 'admin'),
            os.getenv('RABBITMQ_PASS', 'guest')
        )
        connection = pika.BlockingConnection(
            pika.ConnectionParameters(
                host=os.getenv('RABBITMQ_HOST', 'rabbitmq'),
                credentials=credentials
            )
        )
        channel = connection.channel()

        # –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å (–±–µ–∑ passive=True, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–ª–∞—Å—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        queue_info = channel.queue_declare(queue='seller_ids', durable=True)
        message_count = queue_info.method.message_count

        logging.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        connection.close()
        return message_count

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
        return 0


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
    current_count = check_queue_status()
    if current_count > 0:
        response = input(f"‚ö†Ô∏è  –í –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –µ—Å—Ç—å {current_count} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            exit(0)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å
    setup_queue()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    check_queue_status()

    print("\nüéâ –û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
    print("‚úÖ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä—ã:")
    print("docker compose up --build --scale parser=3")