import pika
import os
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)


def setup_queue():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
    load_dotenv()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
    rabbitmq_host = os.getenv('RABBITMQ_HOST', 'localhost')
    rabbitmq_user = os.getenv('RABBITMQ_USER', 'guest')
    rabbitmq_pass = os.getenv('RABBITMQ_PASS', 'guest')
    total_sellers = int(os.getenv('TOTAL_SELLERS', '30000'))

    logging.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ: {rabbitmq_host}")
    logging.info(f"–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_sellers} –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")

    try:
        # –°–æ–∑–¥–∞–µ–º credentials
        credentials = pika.PlainCredentials(rabbitmq_user, rabbitmq_pass)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
        connection = pika.BlockingConnection(
            pika.ConnectionParameters(
                host=rabbitmq_host,
                credentials=credentials,
                heartbeat=600
            )
        )
        channel = connection.channel()

        # –°–æ–∑–¥–∞–µ–º durable –æ—á–µ—Ä–µ–¥—å (–ø–µ—Ä–µ–∂–∏–≤–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ RabbitMQ)
        channel.queue_declare(queue='seller_ids', durable=True)

        # –î–æ–±–∞–≤–ª—è–µ–º ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å
        added_count = 0
        for seller_id in range(1, total_sellers + 1):
            channel.basic_publish(
                exchange='',
                routing_key='seller_ids',
                body=str(seller_id),
                properties=pika.BasicProperties(
                    delivery_mode=2,  # –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –¥–∏—Å–∫–µ
                )
            )
            added_count += 1

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π
            if added_count % 1000 == 0:
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} ID –≤ –æ—á–µ—Ä–µ–¥—å")

        connection.close()

        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å 'seller_ids'")
        logging.info(f"üìä –û—á–µ—Ä–µ–¥—å –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ {total_sellers} –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
        raise


def check_queue_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        load_dotenv()

        rabbitmq_host = os.getenv('RABBITMQ_HOST', 'localhost')
        rabbitmq_user = os.getenv('RABBITMQ_USER', 'guest')
        rabbitmq_pass = os.getenv('RABBITMQ_PASS', 'guest')

        credentials = pika.PlainCredentials(rabbitmq_user, rabbitmq_pass)

        connection = pika.BlockingConnection(
            pika.ConnectionParameters(
                host=rabbitmq_host,
                credentials=credentials
            )
        )
        channel = connection.channel()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥–∏
        queue_info = channel.queue_declare(queue='seller_ids', durable=True, passive=True)
        message_count = queue_info.method.message_count

        logging.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        connection.close()
        return message_count

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
        return 0


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    current_count = check_queue_status()
    if current_count > 0:
        response = input(f"‚ö†Ô∏è  –í –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –µ—Å—Ç—å {current_count} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ")
        if response.lower() != 'y':
            print("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            exit(0)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å
    setup_queue()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    check_queue_status()

    print("\nüéâ –û—á–µ—Ä–µ–¥—å –≥–æ—Ç–æ–≤–∞! –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–∞—Ä—Å–µ—Ä—ã:")
    print("docker compose up --build -d --scale parser=3")