import os
import pika
import logging
import time
import sys
from dotenv import load_dotenv  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def setup_queues():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""

    load_dotenv()
    rabbitmq_host = os.getenv('RABBITMQ_HOST', 'rabbitmq')
    rabbitmq_user = os.getenv('RABBITMQ_USER', 'admin')
    rabbitmq_pass = os.getenv('RABBITMQ_PASS', 'guest')

    start_id = int(os.getenv('START_SELLER_ID', 1))
    end_id = int(os.getenv('END_SELLER_ID', 30000))

    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏")
    logging.info(f"üéØ –î–∏–∞–ø–∞–∑–æ–Ω ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: {start_id} - {end_id}")

    max_retries = 10
    for attempt in range(max_retries):
        try:
            credentials = pika.PlainCredentials(rabbitmq_user, rabbitmq_pass)
            connection = pika.BlockingConnection(
                pika.ConnectionParameters(
                    host=rabbitmq_host,
                    credentials=credentials,
                    heartbeat=600,
                    connection_attempts=3,
                    retry_delay=5
                )
            )

            channel = connection.channel()

            # –£–î–ê–õ–ò–¢–¨ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—á–µ—Ä–µ–¥—å –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            try:
                channel.queue_delete(queue='seller_ids')
                logging.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –æ—á–µ—Ä–µ–¥—å")
            except:
                pass

            # –°–û–ó–î–ê–¢–¨ –æ—á–µ—Ä–µ–¥—å —Å TTL
            channel.queue_declare(
                queue='seller_ids',
                durable=True,
                arguments={'x-message-ttl': 86400000}  # TTL 24 —á–∞—Å–∞
            )
            logging.info("‚úÖ –û—á–µ—Ä–µ–¥—å 'seller_ids' —Å–æ–∑–¥–∞–Ω–∞")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å
            added_count = 0
            batch_size = 1000

            for seller_id in range(start_id, end_id + 1):
                channel.basic_publish(
                    exchange='',
                    routing_key='seller_ids',
                    body=str(seller_id),
                    properties=pika.BasicProperties(
                        delivery_mode=2  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫
                    )
                )
                added_count += 1

                if added_count % batch_size == 0:
                    logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} ID –≤ –æ—á–µ—Ä–µ–¥—å")

            logging.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} ID –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
            connection.close()
            return True

        except Exception as e:
            logging.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < max_retries - 1:
                time.sleep(10)
            else:
                logging.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
                return False


if __name__ == "__main__":
    success = setup_queues()
    if success:
        print("‚úÖ –û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
        sys.exit(0)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
        sys.exit(1)