import csv
import logging
import random
import time
import os
import sys
import tempfile
import shutil
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium_stealth import stealth
from webdriver_manager.chrome import ChromeDriverManager
import pika

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/parser.log'),
        logging.StreamHandler(sys.stdout)
    ]
)


class OzonSellerParser:
    def __init__(self):
        self.instance_id = os.getenv('HOSTNAME', f"parser-{random.randint(1000, 9999)}")
        self.request_count = 0
        self.driver = None
        self.wait = None

        # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è Chrome
        self.chrome_temp_dir = tempfile.mkdtemp()
        logging.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ {self.instance_id}, –ø—Ä–æ—Ñ–∏–ª—å: {self.chrome_temp_dir}")

        try:
            self.setup_driver()
            self.wait = WebDriverWait(self.driver, 15)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV
            self.data_dir = "data"
            os.makedirs(self.data_dir, exist_ok=True)
            self.csv_file = f"{self.data_dir}/sellers_{self.instance_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            self.init_csv()
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            self.close()
            raise

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker —Å headless –∏ stealth"""
        chrome_options = Options()

        # === –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏ –¥–ª—è Docker ===
        chrome_options.add_argument("--headless=new")              # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π headless
        chrome_options.add_argument("--no-sandbox")                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Docker
        chrome_options.add_argument("--disable-dev-shm-usage")     # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç /tmp –≤–º–µ—Å—Ç–æ /dev/shm
        chrome_options.add_argument("--disable-gpu")               # –ù–µ –Ω—É–∂–µ–Ω –≤ headless
        chrome_options.add_argument("--disable-extensions")        # –£–º–µ–Ω—å—à–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É
        chrome_options.add_argument("--disable-setuid-sandbox")
        chrome_options.add_argument("--disable-software-rasterizer")
        chrome_options.add_argument("--disable-ipc-flooding-protection")
        chrome_options.add_argument("--disable-background-timer-throttling")
        chrome_options.add_argument("--disable-backgrounding-occluded-windows")
        chrome_options.add_argument("--disable-renderer-backgrounding")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        chrome_options.add_argument("--window-size=1920,1080")     # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞

        # === Stealth: —Å–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ===
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation", "enable-logging"])
        chrome_options.add_experimental_option('useAutomationExtension', False)

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        chrome_options.add_argument(f"--user-data-dir={self.chrome_temp_dir}")

        # –°–ª—É—á–∞–π–Ω—ã–π User-Agent
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        chrome_options.add_argument(f"--user-agent={random.choice(user_agents)}")

        # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ ===
        try:
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            raise

        # === –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ selenium-stealth (–≤—Å—ë, —á—Ç–æ –Ω–∏–∂–µ ‚Äî —É–¥–∞–ª—è–µ–º, –æ–Ω –¥–µ–ª–∞–µ—Ç —Å–∞–º) ===
        try:
            stealth(
                self.driver,
                languages=["ru-RU", "ru", "en-US", "en"],
                vendor="Google Inc.",
                platform="Win32",
                webgl_vendor="Intel Inc.",
                renderer="Intel Iris OpenGL Engine",
                fix_hairline=True,
                run_on_insecure_origins=False
            )
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è selenium-stealth: {e}")

    def init_csv(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
        headers = [
            'URL', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'HTML_–º–æ–¥–∞–ª–∫–∏', '–û–ì–†–ù', '–ò–ù–ù',
            '–Æ—Ä–ª–∏—Ü–æ', '–°–∞–π—Ç', '–û—Ç–∑—ã–≤—ã', '–†–µ–π—Ç–∏–Ω–≥',
            '–°—Ä–æ–∫_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ö–æ–ª-–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤', '–¢–æ–≤–∞—Ä—ã', 'Instance_ID'
        ]
        try:
            with open(self.csv_file, 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
                writer.writerow(headers)
            logging.info(f"–°–æ–∑–¥–∞–Ω CSV —Ñ–∞–π–ª: {self.csv_file}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV: {e}")


    def save_to_csv(self, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        try:
            with open(self.csv_file, 'a', newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
                writer.writerow([
                    data.get('URL', ''),
                    data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
                    data.get('HTML_–º–æ–¥–∞–ª–∫–∏', ''),
                    data.get('–û–ì–†–ù', ''),
                    data.get('–ò–ù–ù', ''),
                    data.get('–Æ—Ä–ª–∏—Ü–æ', ''),
                    data.get('–°–∞–π—Ç', ''),
                    data.get('–û—Ç–∑—ã–≤—ã', ''),
                    data.get('–†–µ–π—Ç–∏–Ω–≥', ''),
                    data.get('–°—Ä–æ–∫_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', ''),
                    data.get('–ö–æ–ª-–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤', ''),
                    data.get('–¢–æ–≤–∞—Ä—ã', ''),
                    self.instance_id
                ])
            logging.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV")
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")
            return False

    def parse_seller(self, seller_id):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        url = f"https://www.ozon.ru/seller/{seller_id}"
        logging.info(f"üîç –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞ {seller_id}")

        seller_data = {'URL': url}

        try:
            self.driver.get(url)
            time.sleep(random.uniform(3, 5))

            page_source = self.driver.page_source.lower()
            if any(phrase in page_source for phrase in ["—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "404", "–¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", "captcha"]):
                logging.warning(f"‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü {seller_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                return None

            seller_data.update(self.extract_basic_info())
            legal_info = self.click_and_get_legal_info()
            if legal_info:
                seller_data.update(legal_info)

            if self.save_to_csv(seller_data):
                logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–æ–¥–∞–≤–µ—Ü {seller_id}")
                return seller_data
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞ {seller_id}")
                return None

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {seller_id}: {str(e)}")
            return None

    def extract_basic_info(self):
        info = {}
        try:
            title_selectors = ["h1", "[data-widget='title']", ".title"]
            for selector in title_selectors:
                try:
                    element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    info['–ù–∞–∑–≤–∞–Ω–∏–µ'] = element.text.strip()
                    break
                except:
                    continue
            else:
                info['–ù–∞–∑–≤–∞–Ω–∏–µ'] = ""
        except:
            info['–ù–∞–∑–≤–∞–Ω–∏–µ'] = ""

        try:
            rating_els = self.driver.find_elements(By.CSS_SELECTOR, "[class*='rating'], .rating")
            info['–†–µ–π—Ç–∏–Ω–≥'] = rating_els[0].text.strip() if rating_els else ""
        except:
            info['–†–µ–π—Ç–∏–Ω–≥'] = ""

        try:
            product_els = self.driver.find_elements(By.XPATH, "//*[contains(text(), '—Ç–æ–≤–∞—Ä')]")
            for el in product_els:
                if '—Ç–æ–≤–∞—Ä' in el.text.lower():
                    info['–ö–æ–ª-–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤'] = el.text.strip()
                    break
            else:
                info['–ö–æ–ª-–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤'] = ""
        except:
            info['–ö–æ–ª-–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤'] = ""

        return info

    def click_and_get_legal_info(self):
        try:
            button = self.driver.find_element(By.CSS_SELECTOR, ".ag5_5_0-a")
            self.driver.execute_script("arguments[0].click();", button)
            time.sleep(3)

            modal = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".b65_4_8-a"))
            )

            html_modal = modal.get_attribute('outerHTML')
            legal_info = self.parse_legal_info(modal.text)
            legal_info['HTML_–º–æ–¥–∞–ª–∫–∏'] = html_modal

            try:
                close_btn = modal.find_element(By.CSS_SELECTOR, "[class*='close'], button")
                self.driver.execute_script("arguments[0].click();", close_btn)
            except:
                pass

            return legal_info

        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}")
            return {}

    def parse_legal_info(self, text):
        data = {}
        import re
        ip_match = re.search(r'(–ò–ü\s+[–ê-–Ø–∞-—è–Å—ë\s\"]+)', text)
        ooo_match = re.search(r'(–û–û–û\s+[–ê-–Ø–∞-—è–Å—ë\s\"]+)', text)
        if ip_match:
            data['–Æ—Ä–ª–∏—Ü–æ'] = ip_match.group(1)
        elif ooo_match:
            data['–Æ—Ä–ª–∏—Ü–æ'] = ooo_match.group(1)

        ogrn_match = re.search(r'–û–ì–†–ù[:\s]*(\d{12,13})', text)
        if ogrn_match:
            data['–û–ì–†–ù'] = ogrn_match.group(1)

        inn_match = re.search(r'–ò–ù–ù[:\s]*(\d{10,12})', text)
        if inn_match:
            data['–ò–ù–ù'] = inn_match.group(1)

        return data

    def close(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –∏ –æ—á–∏—Å—Ç–∫–∞"""
        if self.driver:
            try:
                self.driver.quit()
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            self.driver = None

        if self.chrome_temp_dir and os.path.exists(self.chrome_temp_dir):
            try:
                shutil.rmtree(self.chrome_temp_dir)
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {e}")


def callback(ch, method, properties, body):
    seller_id = body.decode()
    logging.info(f"üéØ –ü–æ–ª—É—á–µ–Ω ID –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller_id}")

    parser = None
    try:
        parser = OzonSellerParser()
        result = parser.parse_seller(seller_id)
        if result:
            logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–æ–¥–∞–≤–µ—Ü {seller_id}")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ {seller_id}")

        time.sleep(random.uniform(4, 5))
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if parser:
            parser.close()

    ch.basic_ack(delivery_tag=method.delivery_tag)


def start_consumer():
    while True:
        try:
            connection = pika.BlockingConnection(
                pika.ConnectionParameters(
                    host=os.getenv('RABBITMQ_HOST', 'rabbitmq'),
                    credentials=pika.PlainCredentials(
                        os.getenv('RABBITMQ_USER', 'admin'),
                        os.getenv('RABBITMQ_PASS', 'guest')
                    ),
                    heartbeat=600
                )
            )
            channel = connection.channel()
            channel.queue_declare(queue='seller_ids', durable=True)
            channel.basic_qos(prefetch_count=1)
            channel.basic_consume(queue='seller_ids', on_message_callback=callback)
            logging.info("üîÑ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ RabbitMQ...")
            channel.start_consuming()
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
            time.sleep(10)


if __name__ == "__main__":
    start_consumer()
